The Universal Resolving Algorithm[1] is an algorithm for program
inversion, based on the notion of a perfect process tree for
representing the possible traces of a program. A process tree will
often have an infinite representation, meaning that program inversion
does not always terminate.

We investigate two methods for minimizing the size of a process tree
and representing it in finite form, respectively.

The Size-Change Termination Analysis (SCTA)[2] can be used to identify
programs that terminate for all inputs, and size-change graphs
resulting from this approach may be used to cut branches in a process
tree, minimizing its size. We are not aware of any uses of SCTA in the
field of program inversion, but in this report we will investigate
whether this approach is feasible.

Generation of process trees by driving is a technique that originates
from the field of supercompilation[3]. A positive supercompiler uses a
technique called \emph{generalization} to ensure that it will
eventually arrive at a process tree with a finite representation,
which still represents all possible configurations of the program. To
our knowledge, the same technique has not been applied to the field of
program inversion.



[1]
[2]
[3]
